@page "/test_form"
@page "/test_form/{title}"

@inject IStringLocalizer<App> localizer
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager

@using MarathonTutorialWebsite.Data
@using System.Globalization
@using System.Net.Mail
@inject FormDataService formDataService

<style>
    #tf-container {
        width: 100%;
        text-align: left;
    }

    #tf-test-name {
        color: ghostwhite;
    }

    #tf-instructions {
        color: ghostwhite;
    }

    .tf-label {
        color: ghostwhite;
    }

    #tf-submit-btn {
        background-color: transparent;
        border: 1px solid orangered;
        color: orangered;
        margin-top: 25px;
        margin-bottom: 25px;
    }

    #tf-submit-btn:hover {
        background-color: orangered;
        color: ghostwhite;
    }

    #tf-edit-form {
        margin-top: 45px;
    }

    .tf-question-text {
        color: ghostwhite;
        margin-top: 25px;
        font-size: 14pt;
    }

    .tf-label {
        color: ghostwhite;
    }

    .tf-submitted-container-bg {
        position: absolute;
        background-color: rgba(0, 0, 0, 0.7);
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
    }

    .tf-submitted-container {
        color: ghostwhite;
        background-color: rgb(24, 24, 24);
        border-radius: 20px;
        border: 1px solid orangered;
        margin-left: auto;
        margin-right: auto;
        width: 50%;
        margin-top: 350px;
        padding: 25px;
    }

    .tf-passed-header {
        padding-bottom: 25px;
    }

    #tf-rewatch-vid-btn {
        background-color: transparent;
        border: 1px solid orangered;
        color: orangered;
        margin-top: 25px;
    }

    #tf-rewatch-vid-btn:hover {
        background-color: orangered;
        color: ghostwhite;
    }

    #tf-video-list-btn {
        background-color: transparent;
        border: 1px solid orangered;
        color: orangered;
        margin-top: 25px;
    }

    #tf-video-list-btn:hover {
        background-color: orangered;
        color: ghostwhite;
    }

    #tf-submitted-code {
        margin-top: 25px;
    }

    @@media(max-width: 920px) {
        #tf-container {
            margin-left: 25px;
            margin-right: 25px;
            width: 380px;
        }
    }
</style>

<div @ref="formRef" id="tf-container">
    <StandardHeaderOne Underlined="true">@localizer["TF_Take_The_Test"]</StandardHeaderOne>
    <p id="tf-instructions">@localizer["TF_Submit_Instructions_01"]</p>

    <EditForm class="tf-edit-form" model="@Entry">
        <label class="tf-label" for="tf-full-name">@localizer["TF_Full_Name_Entry"]</label>
        <InputText id="tf-full-name" @bind-Value="Entry.FullName" />
    </EditForm>

    <EditForm class="tf-edit-form" model="@Entry">
        <label class="tf-label" for="tf-email">@localizer["TF_Email_Address_Entry"]</label>
        <InputText id="tf-email" @bind-Value="Entry.EmailAddress" />
    </EditForm>

    <EditForm class="tf-edit-form" model="@Questions" OnValidSubmit="SubmitForm">

        @foreach (var q in Questions)
        {
            <h3 class="tf-question-text">@q.Text</h3>

            <InputRadioGroup @bind-Value="q.SelectedAnswer">
                @if (q.Answers.A != null)
                {
                <InputRadio id="answer-a" Value="@q.Answers.A.AnswerText" />
                <label class="tf-label" for="answer-a">A. @q.Answers.A.AnswerText</label>
                }

            @if (q.Answers.B != null)
                {
                <br />
                <InputRadio id="answer-b" Value="@q.Answers.B.AnswerText" />
                <label class="tf-label" for="answer-b">B. @q.Answers.B.AnswerText</label>
                }

            @if (q.Answers.C != null)
                {
                <br />
                <InputRadio id="answer-c" Value="@q.Answers.C.AnswerText" />
                <label class="tf-label" for="answer-c">C. @q.Answers.C.AnswerText</label>
                }

            @if (q.Answers.D != null)
                {
                <br />
                <InputRadio id="answer-d" Value="@q.Answers.D.AnswerText" />
                <label class="tf-label" for="answer-d">D. @q.Answers.D.AnswerText</label>
                }
        </InputRadioGroup>
        }
        <br />
        <input id="tf-submit-btn" class="btn btn-primary" type="submit" value=@localizer["TF_Submit_Btn"]>
    </EditForm>
</div>

@if (isSubmitted)
{
    <div class="tf-submitted-container-bg">
        <div @ref="confirmationRef" class="tf-submitted-container">
            @if (isPassed)
            {
                <h1 class="tf-passed-header">@localizer["TF_Congrats"] <font color="green">@localizer["TF_You_Passed"]</font>
                </h1>
                <p class="tf-submitted-score">@localizer["TF_Score"] @totalCorrect / @totalPossible -> @Percentage%</p>
                <h2 class="tf-passed-header-2">@localizer["TF_Code_Copy_Instructions"]</h2>
                <h2 id="tf-submitted-code">@localizer["TF_Code"] <font color="green">@UniqueCode</font>
                </h2>
                <button id="tf-video-list-btn" class="btn btn-primary"
            @onclick="GoToVideoList">@localizer["TF_Return_To_Training_Videos_Btn"]</button>
            }
            else
            {
                <h1 class="tf-passed-header">@localizer["TF_Sorry"] <font color="red">@localizer["TF_You_Failed"]</font>
                </h1>
                <p class="tf-submitted-score">@localizer["TF_Score"] @totalCorrect / @totalPossible -> @Percentage%</p>
                <h2 class="tf-passed-header-2">@localizer["TF_Rewatch_Instructions"]</h2>
                <button id="tf-rewatch-vid-btn" class="btn btn-primary"
            @onclick="GoToVideo">@localizer["TF_Go_Back_To_Videos"]</button>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string Title { get; set; }
    private List<Question> Questions { get; set; }
    private FormDataEntry Entry { get; set; }
    private bool isSubmitted { get; set; } = false;
    private bool isPassed { get; set; } = false;
    private int totalPossible { get => Questions.Count; }
    private int totalCorrect { get; set; } = 0;
    private int Percentage { get; set; } = 0;
    private string UniqueCode { get; set; }
    private ElementReference formRef { get; set; }
    private ElementReference confirmationRef { get; set; }

    protected override void OnParametersSet()
    {
        Title = Title ?? "";
        formDataService.LoadFormDataFromJson(Title);
        Entry = formDataService.Entry;

        var selected_language = CultureInfo.CurrentCulture.Name;
        if (selected_language == "en-US")
        {
            Questions = formDataService.Entry.English.Questions;
        }
        else if (selected_language == "es-ES")
        {
            Questions = formDataService.Entry.Spanish.Questions;
        }
    }

    private async void GoToVideo()
    {
        await JSRuntime.InvokeVoidAsync("thisAppFunctions.HistoryGoBack", null);
    }

    private void GoToVideoList()
    {
        navigationManager.NavigateTo("/");
    }

    public void SubmitForm()
    {
        isSubmitted = true;
        CalculateScore();

        if (Percentage >= 70)
            SendEmail();
    }

    private void CalculateScore()
    {
        foreach (var q in Questions)
        {
            if (q.SelectedAnswer == null) continue;

            if (q.Answers.A == null) continue;
            if (q.Answers.A.IsCorrect && q.SelectedAnswer.Equals(q.Answers.A.AnswerText))
            {
                totalCorrect++;
                continue;
            }

            if (q.Answers.B == null) continue;
            if (q.Answers.B.IsCorrect && q.SelectedAnswer.Equals(q.Answers.B.AnswerText))
            {
                totalCorrect++;
                continue;
            }

            if (q.Answers.C == null) continue;
            if (q.Answers.C.IsCorrect && q.SelectedAnswer.Equals(q.Answers.C.AnswerText))
            {
                totalCorrect++;
                continue;
            }

            if (q.Answers.D == null) continue;
            if (q.Answers.D.IsCorrect && q.SelectedAnswer.Equals(q.Answers.D.AnswerText))
            {
                totalCorrect++;
                continue;
            }
        }

        Percentage = (int)Math.Round(((float)totalCorrect / (float)totalPossible) * 100.0);

        if (Percentage >= 70)
        {
            isPassed = true;
            UniqueCode = RandomString(6);
        }

    }

    public static string RandomString(int length)
    {
        Random random = new Random();
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length)
        .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private void SendEmail()
    {
        var email = "safetytests@marathonelectrical.com";
        var onboard_email = "safetyonboarding@marathonelectrical.com";

        MailMessage msg = new MailMessage();
        msg.From = new MailAddress(email);
        msg.To.Add(email);
        msg.To.Add(onboard_email);
        msg.IsBodyHtml = true;
        msg.Subject = GetMessageSubject();
        msg.Body = GetMessageBody();
        var creds = new System.Net.NetworkCredential(email, "Rm@n2021*!");

        SmtpClient client = new SmtpClient("smtp.office365.com", 587);
        client.DeliveryMethod = SmtpDeliveryMethod.Network;
        client.UseDefaultCredentials = false;
        client.Credentials = creds;
        client.EnableSsl = true;

        client.Send(msg);
    }

    private string GetMessageSubject()
    {
        var subject = "";

        if (string.IsNullOrWhiteSpace(Entry.FullName))
        {
            subject += "An Employee ";
        }
        else
        {
            subject += Entry.FullName + " ";
        }

        subject += "has completed the " + Title + " Test";
        return subject;
    }

    private string GetMessageBody()
    {
        var body = "<h1>Score: " + totalCorrect + "/" + totalPossible + " -> " + Percentage + "%" + "</h1><!--!-->" +
        "<h1>Unique Code: " + UniqueCode + "</h1><!--!-->";

        var email = string.IsNullOrWhiteSpace(Entry.EmailAddress) ? "No Email Address Provided" : Entry.EmailAddress;
        var fname = string.IsNullOrWhiteSpace(Entry.FullName) ? "No Name Provided" : Entry.FullName;

        body += "<h1>Test Name: " + Title + "</h1><!--!-->";
        body += "<h1>Full Employee Name: " + fname + "</h1><!--!-->";
        body += "<h1>Employee Email: " + email + "</h1><!--!--><hr /><!--!-->";

        foreach (var q in Questions)
        {
            body += "<h3>Question: " + q.Text + "</h3><!--!-->";
            body += "<p>Answer: " + q.SelectedAnswer + "</p><!--!-->";
        }

        return body;
    }

    private void Test(string text)
    {
        JSRuntime.InvokeVoidAsync("alert", text);
    }
}